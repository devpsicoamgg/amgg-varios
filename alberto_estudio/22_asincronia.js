//En el contexto de JavaScript, la asincron칤a (o programaci칩n as칤ncrona) se refiere a la capacidad de realizar tareas sin bloquear
//el hilo principal de ejecuci칩n. En otras palabras, permite que ciertas operaciones se realicen de forma independiente y en paralelo,
//sin esperar a que se completen antes de continuar con otras tareas.
//En un entorno de ejecuci칩n s칤ncrono, las tareas se realizan una tras otra en secuencia. Si una tarea toma mucho tiempo en completarse,
//todas las tareas siguientes se bloquean y deben esperar a que termine antes de poder ejecutarse. Esto puede ser problem치tico en aplicaciones
//web, ya que podr칤a hacer que la interfaz de usuario se vuelva lenta y poco receptiva.
// La programaci칩n as칤ncrona en JavaScript se logra principalmente utilizando:
// Callbacks: Una funci칩n que se pasa como argumento a otra funci칩n y que se ejecuta despu칠s de que la funci칩n original haya terminado su tarea.
//Promesas: Un objeto que representa un valor que puede estar disponible ahora, en el futuro o nunca. Las promesas permiten encadenar operaciones
//as칤ncronas y manejar errores de manera m치s eficiente.
//Async/await: Una forma m치s sint치ctica y legible de trabajar con c칩digo as칤ncrono. Las funciones que utilizan la palabra clave "async" devuelven
//promesas autom치ticamente, y dentro de ellas, se puede utilizar la palabra clave "await" para esperar a que se resuelvan las promesas y obtener
//sus resultados.
//La programaci칩n as칤ncrona es esencial en JavaScript, especialmente cuando se trabaja con tareas que involucran interacciones de red,
//como solicitudes HTTP a servidores, operaciones de lectura y escritura en bases de datos, o cualquier operaci칩n que pueda llevar
//tiempo en completarse. Al utilizar la asincron칤a de manera adecuada, se puede mejorar la eficiencia y la capacidad de respuesta de
//las aplicaciones.

//Temporizadores: Por ejemplo, utilizando la funci칩n setTimeout, se puede programar una funci칩n
// para que se ejecute despu칠s de cierto tiempo. El siguiente c칩digo muestra un ejemplo de c칩mo
//utilizar una callback en un temporizador:

setTimeout(() => {
  console.log("C칩digo as칤ncrono.");
}, 2000);
console.log("C칩digo s칤ncrono.");

//CALLBACK - HELL
function cuadradoCallback(value, callback) {
  setTimeout(() => {
    callback(value, value * value);
  }, 0 | (Math.random() * 1000));
}

cuadradoCallback(0, (value, result) => {
  console.log("Inicia Callback");
  console.log(`Callback: ${value}, ${result}`);
  cuadradoCallback(1, (value, result) => {
    console.log(`Callback: ${value}, ${result}`);
    cuadradoCallback(2, (value, result) => {
      console.log(`Callback: ${value}, ${result}`);
      cuadradoCallback(3, (value, result) => {
        console.log(`Callback: ${value}, ${result}`);
        cuadradoCallback(4, (value, result) => {
          console.log(`Callback: ${value}, ${result}`);
          cuadradoCallback(5, (value, result) => {
            console.log(`Callback: ${value}, ${result}`);
            console.log("Fin Callback");
            console.log("Callback Hell !!!!!游땓游뱆");
            console.log("http://callbackhell.com/");
          });
        });
      });
    });
  });
});

//Eventos: En la programaci칩n de interfaces de usuario, se utilizan callbacks para manejar eventos.
//Por ejemplo, al hacer clic en un bot칩n, se puede especificar una funci칩n callback que se ejecutar치
//cuando ocurra el evento. El siguiente c칩digo muestra un ejemplo de c칩mo utilizar una callback como funci칩n escuchadora de un evento:

function showAlert() {
  alert("Alerta");
}
button.addEventListener("click", showAlert);

// Tareas as칤ncronas: Las callbacks tambi칠n se utilizan para manejar tareas as칤ncronas. Por ejemplo,
//al realizar una petici칩n HTTP, se puede pasar una callback que se ejecutar치 una vez que se obtenga
//la respuesta. El siguiente c칩digo muestra un ejemplo de c칩mo utilizar una callback para manejar una tarea as칤ncrona:

function doTask(number, callback) {
  // C칩digo de la funci칩n
}

doTask(42, function (err, result) {
  // Trabajamos con err o result seg칰n nos interese
});

//Las Promesas en JavaScript son objetos que representan el resultado de una operaci칩n as칤ncrona. Proporcionan una forma m치s estructurada
//y legible de manejar la asincron칤a en comparaci칩n con las callbacks anidadas. Las Promesas resuelven el problema del "callback hell"
//al permitir encadenar operaciones de manera m치s clara y f치cil de entender.

/*
    Estados de una Promesa:
        Pendiente (pending): La Promesa est치 en curso y a칰n no se ha resuelto ni rechazado.
        Cumplida (fulfilled): La Promesa se resolvi칩 exitosamente y se obtuvo un resultado.
        Rechazada (rejected): La Promesa fue rechazada y se obtuvo un motivo de rechazo.

    M칠todos de una Promesa:
        then(): Se utiliza para manejar el resultado exitoso de una Promesa. Recibe una funci칩n de callback que se ejecutar치 cuando la Promesa se resuelva correctamente.
        catch(): Se utiliza para manejar el motivo de rechazo de una Promesa. Recibe una funci칩n de callback que se ejecutar치 cuando la Promesa sea rechazada.
        finally(): Se utiliza para ejecutar c칩digo sin importar si la Promesa se resuelve o se rechaza. Recibe una funci칩n de callback que se ejecutar치 siempre al final, sin importar el resultado de la Promesa.

    Encadenamiento de Promesas:
        El m칠todo then() tambi칠n devuelve una Promesa, lo que permite encadenar m칰ltiples operaciones as칤ncronas de manera m치s clara.
        Cada then() puede recibir una funci칩n de callback que devuelve una Promesa, lo que permite encadenar operaciones sucesivas.
        Esto evita la anidaci칩n excesiva de callbacks y mejora la legibilidad del c칩digo.
*/

function cuadradoPromise(value) {
  if (typeof value !== "number") {
    return Promise.reject(
      `Error, el valor " ${value} " ingresado no es un n칰mero`
    );
  }

  return new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve({
        value,
        result: value * value,
      });
    }, 10 | (Math.random() * 1000));
  });
}

cuadradoPromise(0)
  .then((obj) => {
    //console.log(obj);
    console.log("Inicio Promise");
    console.log(`Promise: ${obj.value}, ${obj.result}`);
    return cuadradoPromise(1);
  })
  .then((obj) => {
    console.log(`Promise: ${obj.value}, ${obj.result}`);
    return cuadradoPromise(2);
  })
  .then((obj) => {
    console.log(`Promise: ${obj.value}, ${obj.result}`);
    return cuadradoPromise(3);
  })
  .then((obj) => {
    console.log(`Promise: ${obj.value}, ${obj.result}`);
    return cuadradoPromise("4");
  })
  .then((obj) => {
    console.log(`Promise: ${obj.value}, ${obj.result}`);
    return cuadradoPromise(5);
  })
  .then((obj) => {
    console.log(`Promise: ${obj.value}, ${obj.result}`);
    console.log("Fin Promise");
  })
  .catch((err) => console.error(err));
